generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  first_name           String        @db.VarChar(50)
  middle_name          String?       @db.VarChar(50)
  last_name            String        @db.VarChar(50)
  username            String        @unique @db.VarChar(100)
  password             String
  mobile_number        String        @unique
  linkedin_account     String?
  posts                Post[]
  chats                Chat[]
  comments             Comment[]
  messages             Message[]
  active               Boolean       @default(false)
  user_hashtags        UserHashTag[]
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  profile              Profile?
}

model HashTag {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  user_hashtags UserHashTag[]
}

model UserHashTag {
  user_id    Int
  hashtag_id Int
  hashtags   HashTag @relation(fields: [hashtag_id], references: [id])
  users      User    @relation(fields: [user_id], references: [id])

  @@id([user_id, hashtag_id])
}

model Profile {
  id              Int             @id @default(autoincrement())
  resume          Json?
  avatar          String? //stored in Object DB -> URL
  self_intro      String?
  available_times AvailableTime[]
  city            String?
  country         String?
  suburb          String?
  geocode         String? //Google Map API -> JSON -> Convert it to String (Used to calculate distance)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  user            User            @relation(fields: [user_id], references: [id])
  user_id         Int             @unique
}

//TBD
model AvailableTime {
  id         Int      @id @default(autoincrement())
  profile    Profile  @relation(fields: [id], references: [id])
  profile_id Int
  start_time DateTime
  end_time   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [id], references: [id])
  content    Json
  comments   Comment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  //likes TBD
}

model Comment {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  post_id    Int
  content    Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Chat {
  id         Int       @id @default(autoincrement())
  user       User[]
  message    Message[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  chat       Chat     @relation(fields: [chat_id], references: [id])
  sender     User     @relation(fields: [sender_id], references: [id])
  chat_id    Int
  sender_id  Int
  content    Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
